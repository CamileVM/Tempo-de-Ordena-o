import java.util.Arrays;

public class BubbleSortBenchmark {
    public static void main(String[] args) {
        int[] arr = generateDescendingArray(100000);
        long totalExecutionTime = 0;
        int numberOfExecutions = 10;

        for (int i = 0; i < numberOfExecutions; i++) {
            int[] arrCopy = Arrays.copyOf(arr, arr.length);
            long startTime = System.nanoTime();
            bubbleSort(arrCopy);
            long endTime = System.nanoTime();
            totalExecutionTime += (endTime - startTime);
        }

        long averageExecutionTime = totalExecutionTime / numberOfExecutions;
        System.out.println("Average Execution Time (in nanoseconds): " + averageExecutionTime);
    }

    public static int[] generateDescendingArray(int size) {
        int[] arr = new int[size];
        for (int i = 0; i < size; i++) {
            arr[i] = size - i;
        }
        return arr;
    }

    public static void bubbleSort(int[] arr) {
        int n = arr.length;
        boolean swapped;

        for (int i = 0; i < n - 1; i++) {
            swapped = false;

            for (int j = 0; j < n - i - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    // Swap arr[j] and arr[j+1]
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                    swapped = true;
                }
            }

            // If no two elements were swapped in the inner loop, the array is already sorted.
            if (!swapped) {
                break;
            }
        }
    }
}

