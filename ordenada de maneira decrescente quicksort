import java.util.Arrays;
import java.util.Random;

public class QuickSortBenchmark {
    public static void main(String[] args) {
        int[] arr = generateDescendingArray(100000);
        long totalExecutionTime = 0;
        int numberOfExecutions = 10;

        for (int i = 0; i < numberOfExecutions; i++) {
            int[] arrCopy = Arrays.copyOf(arr, arr.length);
            long startTime = System.nanoTime();
            quickSort(arrCopy, 0, arrCopy.length - 1);
            long endTime = System.nanoTime();
            totalExecutionTime += (endTime - startTime);
        }

        long averageExecutionTime = totalExecutionTime / numberOfExecutions;
        System.out.println("Average Execution Time (in nanoseconds): " + averageExecutionTime);
    }

    public static int[] generateDescendingArray(int size) {
        int[] arr = new int[size];
        for (int i = 0; i < size; i++) {
            arr[i] = size - i;
        }
        return arr;
    }

    public static void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            int pivotIndex = partition(arr, low, high);
            quickSort(arr, low, pivotIndex - 1);
            quickSort(arr, pivotIndex + 1, high);
        }
    }

    public static int partition(int[] arr, int low, int high) {
        int pivot = arr[high];
        int i = low - 1;

        for (int j = low; j < high; j++) {
            if (arr[j] > pivot) {
                i++;
                swap(arr, i, j);
            }
        }

        swap(arr, i + 1, high);
        return i + 1;
    }

    public static void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}
