public class MergeSortBenchmark {

    public static void main(String[] args) {
        int numSamples = 100; // Número de repetições
        int arraySize = 100000; // Tamanho do vetor
        int[] sortedArray = generateSortedArray(arraySize);

        long totalElapsedTime = 0;

        for (int i = 0; i < numSamples; i++) {
            int[] arr = sortedArray.clone(); // Copia o vetor ordenado
            long startTime = System.nanoTime();
            mergeSort(arr);
            long endTime = System.nanoTime();
            totalElapsedTime += (endTime - startTime);
        }

        double averageTime = (double) totalElapsedTime / numSamples / 1e9; // Convertendo para segundos

        System.out.printf("Tempo médio para ordenar %d elementos: %.6f segundos%n", arraySize, averageTime);
    }

    public static void mergeSort(int[] arr) {
        int n = arr.length;
        if (n < 2) {
            return;
        }

        int mid = n / 2;
        int[] left = new int[mid];
        int[] right = new int[n - mid];

        System.arraycopy(arr, 0, left, 0, mid);
        System.arraycopy(arr, mid, right, 0, n - mid);

        mergeSort(left);
        mergeSort(right);

        merge(arr, left, right);
    }

    public static void merge(int[] arr, int[] left, int[] right) {
        int nLeft = left.length;
        int nRight = right.length;
        int i = 0, j = 0, k = 0;

        while (i < nLeft && j < nRight) {
            if (left[i] <= right[j]) {
                arr[k++] = left[i++];
            } else {
                arr[k++] = right[j++];
            }
        }

        while (i < nLeft) {
            arr[k++] = left[i++];
        }

        while (j < nRight) {
            arr[k++] = right[j++];
        }
    }

    public static int[] generateSortedArray(int size) {
        int[] arr = new int[size];
        for (int i = 0; i < size; i++) {
            arr[i] = i;
        }
        return arr;
    }
}
